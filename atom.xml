<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Giskard's CFD Learning Tricks]]></title>
  <subtitle><![CDATA[CFD and Scientic Computing]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xiaopingqiu.github.io/"/>
  <updated>2015-05-03T14:58:20.758Z</updated>
  <id>http://xiaopingqiu.github.io/</id>
  
  <author>
    <name><![CDATA[Giskard Q.]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ParaView 的远程模式]]></title>
    <link href="http://xiaopingqiu.github.io/2015/05/03/paraview-remote/"/>
    <id>http://xiaopingqiu.github.io/2015/05/03/paraview-remote/</id>
    <published>2015-05-03T12:49:02.000Z</published>
    <updated>2015-05-03T14:58:20.758Z</updated>
    <content type="html"><![CDATA[<p>OpenFOAM 用户肯定都用过<a href="http://www.paraview.org/" target="_blank" rel="external">ParaView</a>可视化软件，这款软件可以方便地读取 OpenFOAM 的数据进行种类丰富的可视化操作。用 ParaView 可视化 OpenFOAM数据很简单，只需要在算例目录下运行<code>paraFoam</code>即可(注一)。但是，如果你不是在本地机器上运行 OpenFOAM，而是在远程机器上运行，这时候想在本地直接用 ParaView 来可视化远程机器上的数据，该怎么办呢？这个问题要分情况讨论：</p>
<ol>
<li>远程机器没有禁止远程开启GUI<ul>
<li>本地机器安装的是Linux系统，那么可以这样做：<code>ssh -X your_remote_machine</code> 登录到远程机器，注意这里加了<code>-X</code>选项，正常的话，应该直接在终端里运行<code>paraFoam</code>就可以远程启动 ParaView。</li>
<li>本地机器安装的是 Windows，这种情况下可以通过安装一个 Xserver，比如<a href="http://sourceforge.net/projects/xming/" target="_blank" rel="external">Xming</a>，然后用一个支持 X11 Forwarding 的 SSH 客户端（比如 putty）用<code>ssh -X</code>登录到远程机器，正常的话，直接运行<code>paraFoam</code>可以远程启动 ParaView。但根据我的使用经验，这种方法稳定性很差，容易崩溃。</li>
</ul>
</li>
<li>远程机器设置了禁止远程开启GUI程序<br>这种情况下上面提到的两种方法就都不奏效了。这时，下面要介绍的 ParaView 远程模式就能派上用场了。</li>
</ol>
<p>ParaView 远程模式基本的使用方法是，在远程机器上启动一个<code>pvserver</code>，然后用本地机器安装的 ParaView 连接到这个 server上(Client/Server 模式)，或者反过来，本地机器开启一个 server，然后让远程机器连接到本地的 server(Client/Server(reverse connection) 模式),以下将一一介绍。</p>
<a id="more"></a>
<h4 id="Client/Server_模式">Client/Server 模式</h4><p>建立方法如下：</p>
<ol>
<li>在远程机器上运行pvserver；</li>
<li>运行本地机器上的 ParaView，点击菜单栏左上角的“Connect”，出来如下界面：<br><img src="/image/paraview_remote/cs1.png" alt=""></li>
<li>选择 “Add server”，然后在如下界面中设置 server：<br><img src="/image/paraview_remote/cs2.png" alt=""><br>“Server Type”选择”Client/Server”，”Host”填写远程的机器的 IP，”Port”默认即可。点”configure”，便添加了一个 server，这个设置会自动保存下来，下次再打开 “Connect”时，默认就会看到保存的 server 列表。<br><img src="/image/paraview_remote/cs3.png" alt=""></li>
<li>双击列表中需要连接的 server，正常地话便连接到远程机器了，这时候点打开文件，看到的便是远程机器上的文件了！</li>
</ol>
<p><strong>注意事项</strong>：本地机器和远程机器的必须安装同一个版本的ParaView，否则会报错。此外，这种连接方式不能使用”PointSprite_Plugin”插件来显示颗粒。</p>
<h4 id="Client/Server(reverse_connection)_模式">Client/Server(reverse connection) 模式</h4><p>有时候，远程机器上无法正常运行<code>pvserver</code>, 比如报如下错误：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Waiting <span class="keyword">for</span> client… </span><br><span class="line">Connection <span class="string">URL:</span> <span class="string">cs:</span><span class="comment">//A402:11111 </span></span><br><span class="line"><span class="string">ERROR:</span> In <span class="regexp">/home/</span>utkarsh<span class="regexp">/Dashboards/</span>MyTests<span class="regexp">/NightlyMaster/</span>ParaViewSuperbuild-Release<span class="regexp">/paraview/</span>src<span class="regexp">/paraview/</span>VTK<span class="regexp">/Common/</span>System/vtkSocket.cxx, line <span class="number">206</span> </span><br><span class="line">vtkServerSocket (<span class="number">0x1a1206e0</span>): Socket error <span class="keyword">in</span> call to bind. Address already <span class="keyword">in</span> use.</span><br><span class="line"><span class="string">ERROR:</span> In <span class="regexp">/home/</span>utkarsh<span class="regexp">/Dashboards/</span>MyTests<span class="regexp">/NightlyMaster/</span>ParaViewSuperbuild-Release<span class="regexp">/paraview/</span>src<span class="regexp">/paraview/</span>ParaViewCore<span class="regexp">/ClientServerCore/</span>Core/vtkTCPNetworkAccessManager.cxx, line <span class="number">355</span> </span><br><span class="line">vtkTCPNetworkAccessManager (<span class="number">0x1983fa00</span>): Failed to set up server socket.</span><br><span class="line"> Exiting…</span><br></pre></td></tr></table></figure></p>
<p>这时，可以采用Client/Server(reverse connection) 模式，这种模式是在本地机器上开启一个 server，然后让远程机器连上它，具体做法如下：</p>
<ol>
<li>先在本地机器上启动 ParaView，并按照上面所述的方法建立一个server，注意这里”Server Type” 要选择 “Client/Server(reverse connection)”，如下图：<br><img src="/image/paraview_remote/rc1.png" alt=""></li>
<li>连接上这个新建的 server：<br><img src="/image/paraview_remote/rc2.png" alt=""><br>连上以后，显示”waiting for server to connect”，如下<br><img src="/image/paraview_remote/rc3.png" alt=""></li>
<li><p>在远程机器上运行 </p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pvserver</span> -rc -ch=<span class="number">192.168.1.34</span></span><br></pre></td></tr></table></figure>
<p>注意这里用选项-rc开启reverse connection 模式，-ch选项指定本地机器的 IP。这样就建立了从远程机器到本地机器的连接。 </p>
</li>
<li>连接建立以后，点打开文件，看到的便是远程机器上的文件了，跟 Client/Server 模式一样。</li>
</ol>
<p><strong>一个细节值得注意</strong>：当用 Client/Server 模式或Client/Server(reverse connection) 模式建立起本地机器与远程机器的连接以后，”Save Screenshot”, “Save Animation”, “Export Scene” 以及”Save state”会输出到本地机器，而”Save Data”和”Save Geometry”将仍然输出到远程机器。</p>
<p>注一：<code>paraFoam</code>的正常运行依赖于 libPV3reader.so 等几个库，有时候这几个库不能正常编译生成。ParaView 自从 4.0 版本以后，不需要使用<code>paraFoam</code>直接就能读取 OpenFOAM的数据，用户只需要在算例下新建一个<code>.foam</code>结尾的空文件，然后用 ParaView打开这个空文件即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>OpenFOAM 用户肯定都用过<a href="http://www.paraview.org/">ParaView</a>可视化软件，这款软件可以方便地读取 OpenFOAM 的数据进行种类丰富的可视化操作。用 ParaView 可视化 OpenFOAM数据很简单，只需要在算例目录下运行<code>paraFoam</code>即可(注一)。但是，如果你不是在本地机器上运行 OpenFOAM，而是在远程机器上运行，这时候想在本地直接用 ParaView 来可视化远程机器上的数据，该怎么办呢？这个问题要分情况讨论：</p>
<ol>
<li>远程机器没有禁止远程开启GUI<ul>
<li>本地机器安装的是Linux系统，那么可以这样做：<code>ssh -X your_remote_machine</code> 登录到远程机器，注意这里加了<code>-X</code>选项，正常的话，应该直接在终端里运行<code>paraFoam</code>就可以远程启动 ParaView。</li>
<li>本地机器安装的是 Windows，这种情况下可以通过安装一个 Xserver，比如<a href="http://sourceforge.net/projects/xming/">Xming</a>，然后用一个支持 X11 Forwarding 的 SSH 客户端（比如 putty）用<code>ssh -X</code>登录到远程机器，正常的话，直接运行<code>paraFoam</code>可以远程启动 ParaView。但根据我的使用经验，这种方法稳定性很差，容易崩溃。</li>
</ul>
</li>
<li>远程机器设置了禁止远程开启GUI程序<br>这种情况下上面提到的两种方法就都不奏效了。这时，下面要介绍的 ParaView 远程模式就能派上用场了。</li>
</ol>
<p>ParaView 远程模式基本的使用方法是，在远程机器上启动一个<code>pvserver</code>，然后用本地机器安装的 ParaView 连接到这个 server上(Client/Server 模式)，或者反过来，本地机器开启一个 server，然后让远程机器连接到本地的 server(Client/Server(reverse connection) 模式),以下将一一介绍。</p>]]>
    
    </summary>
    
      <category term="Postprocessing" scheme="http://xiaopingqiu.github.io/tags/Postprocessing/"/>
    
      <category term="paraview" scheme="http://xiaopingqiu.github.io/tags/paraview/"/>
    
      <category term="Paraview" scheme="http://xiaopingqiu.github.io/categories/Paraview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fieldAverage 使用说明]]></title>
    <link href="http://xiaopingqiu.github.io/2015/04/12/fieldAverage/"/>
    <id>http://xiaopingqiu.github.io/2015/04/12/fieldAverage/</id>
    <published>2015-04-12T09:00:54.000Z</published>
    <updated>2015-05-03T13:14:36.653Z</updated>
    <content type="html"><![CDATA[<p><code>fieldAverage</code>是 OpenFOAM 中的一种 functionObject，用来计算时均值。其基本用法是作为一个 function object 放在 controlDict 文件中，运行 solver 的同时计算指定场的时均值，以下是一个示例：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">functions</span><br><span class="line">&#123;</span><br><span class="line">    fieldAverage1</span><br><span class="line">    &#123;</span><br><span class="line">        type            fieldAverage;</span><br><span class="line">        functionObjectLibs ( <span class="string">"libfieldFunctionObjects.so"</span> );</span><br><span class="line">        outputControl   outputTime;</span><br><span class="line">        fields</span><br><span class="line">        (</span><br><span class="line">            Ua</span><br><span class="line">            &#123;</span><br><span class="line">                 mean        <span class="function_start"><span class="keyword">on</span></span>;</span><br><span class="line">                 prime2Mean  off;</span><br><span class="line">                 base        <span class="property">time</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Ub</span><br><span class="line">            &#123;</span><br><span class="line">                 mean        <span class="function_start"><span class="keyword">on</span></span>;</span><br><span class="line">                 prime2Mean  off;</span><br><span class="line">                 base        <span class="property">time</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是，在有效地使用<code>fieldAverage</code>之前，有一些问题需要澄清，其中最重要的一个是：<strong><code>fieldAverage</code>到底在对哪个时间段求的时间平均</strong>？本文通过对<code>fieldAverage</code>的源码进行分析，试图厘清这些细节，并给出一个可靠的<code>fieldAverage</code>使用说明。涉及到的源文件包括：<code>fieldAverage.H</code>, <code>fieldAverage.C</code>, <code>fieldAverageTemplates.C</code>, <code>fieldAverageItem.C</code>，位于目录<code>$WM_PROJECT_DIR/src/postProcessing/functionObjects/field/fieldAverage</code>下。</p>
<h5 id="首要问题：fieldAverage对哪个时间区间进行时均计算？">首要问题：<strong><code>fieldAverage</code>对哪个时间区间进行时均计算</strong>？</h5><p>上面这段代码是从我运行的一个算例的 controlDict 中摘出来的。算例运行过程中发现，每一个时间步都要调用计算时均值相关的代码，并屏幕上的输出也会打印出<code>Calculating averages</code>，而每一个输出数据文件里，都有<code>*Mean</code>数据，其中<code>*</code>表示在<code>controlDict</code>中定义了需要求解时均值的某个场。<br>经过摸索发现，跟时均值求解密切相关的一段代码位于<a href="http://foam.sourceforge.net/docs/cpp/a08780_source.html" target="_blank" rel="external"><code>fieldAverageTemplates.C</code></a>，下面是从中摘出来的一段核心代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">182</span> <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;</span><br><span class="line"><span class="number">183</span> <span class="keyword">void</span> Foam::fieldAverage::calculateMeanFieldType(<span class="keyword">const</span> label fieldI) <span class="keyword">const</span></span><br><span class="line"><span class="number">184</span> &#123;</span><br><span class="line"><span class="number">185</span>  <span class="keyword">const</span> word&amp; fieldName = faItems_[fieldI].fieldName();</span><br><span class="line"><span class="number">187</span>  <span class="keyword">if</span> (obr_.foundObject&lt;Type&gt;(fieldName))</span><br><span class="line"><span class="number">188</span>  &#123;</span><br><span class="line"><span class="number">189</span>    <span class="keyword">const</span> Type&amp; baseField = obr_.lookupObject&lt;Type&gt;(fieldName);</span><br><span class="line"><span class="number">190</span> </span><br><span class="line"><span class="number">191</span>    Type&amp; meanField = <span class="keyword">const_cast</span>&lt;Type&amp;&gt;</span><br><span class="line"><span class="number">192</span>    (</span><br><span class="line"><span class="number">193</span>    obr_.lookupObject&lt;Type&gt;(faItems_[fieldI].meanFieldName())</span><br><span class="line"><span class="number">194</span>    );</span><br><span class="line"><span class="number">195</span> </span><br><span class="line"><span class="number">196</span>    scalar dt = obr_.time().deltaTValue();</span><br><span class="line"><span class="number">197</span>    scalar Dt = totalTime_[fieldI];</span><br><span class="line"><span class="number">198</span> </span><br><span class="line"><span class="number">199</span>    <span class="keyword">if</span> (faItems_[fieldI].iterBase())</span><br><span class="line"><span class="number">200</span>    &#123;</span><br><span class="line"><span class="number">201</span>      dt = <span class="number">1.0</span>;</span><br><span class="line"><span class="number">202</span>      Dt = scalar(totalIter_[fieldI]);</span><br><span class="line"><span class="number">203</span>    &#125;</span><br><span class="line"><span class="number">204</span> </span><br><span class="line"><span class="number">205</span>    scalar alpha = (Dt - dt)/Dt;</span><br><span class="line"><span class="number">206</span>    scalar beta = dt/Dt;</span><br><span class="line"><span class="number">207</span> </span><br><span class="line"><span class="number">208</span>    <span class="keyword">if</span> (faItems_[fieldI].window() &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">209</span>    &#123;</span><br><span class="line"><span class="number">210</span>      <span class="keyword">const</span> scalar w = faItems_[fieldI].window();</span><br><span class="line"><span class="number">211</span> </span><br><span class="line"><span class="number">212</span>      <span class="keyword">if</span> (Dt - dt &gt;= w)</span><br><span class="line"><span class="number">213</span>      &#123;</span><br><span class="line"><span class="number">214</span>        alpha = (w - dt)/w;</span><br><span class="line"><span class="number">215</span>        beta = dt/w;</span><br><span class="line"><span class="number">216</span>      &#125;</span><br><span class="line"><span class="number">217</span>    &#125;</span><br><span class="line"><span class="number">219</span>    meanField = alpha*meanField + beta*baseField;</span><br><span class="line"><span class="number">220</span>  &#125;</span><br><span class="line"><span class="number">221</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>以下是我根据理解整理的代码解析：</p>
<ol>
<li>变量<code>baseField</code>定义为当前时间步计算得到的场的值(Ua)，<code>meanField</code>定义为上一个时间步对应的场的时均值(UaMean)。</li>
<li><code>dt</code>定义为时间步长，<code>Dt</code>定义为当前所在的时间。注意199行，<code>iterBase()</code>这个函数定义为当<code>base</code>(见controlDict)为<code>ITER</code>时，返回<code>true</code>。此时，<code>dt</code>定义为1，意义很显然，当以时间步数为基准的时候，下一步和上一步当然是只相差1个时间步；<code>Dt</code>则被定义为当前所在的时间步(第xx步)。所以，<code>Dt</code>和<code>dt</code>的真实含义取决于<code>base</code>。<strong><code>fieldAverageItem.C</code>中给<code>base</code>赋了默认值为<code>ITER</code></strong>。<code>base</code>可以指定为<code>time</code>，具体见下文。</li>
<li><p>alpha 定义为(Dt-dt)/Dt, beta 定义为 dt/Dt。然后当前时间步的<code>meanField</code>定义为<code>alpha*meanField + beta*baseField</code>。举例说明，假设dt = 1, Dt = 20, 假设上一时间步的时均值为<code>meanField_pre</code>，则新时刻时均值为</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19/20<span class="keyword">*</span>meanField_pre + 1/20<span class="keyword">*</span>baseField) = (19<span class="keyword">*</span>meanField_pre + baseField)/20</span><br></pre></td></tr></table></figure>
<p><code>19*meanField_pre</code>的含义很明显，前19步的时均值乘以总时间步数，也就是前 19 步 Field 值的加和，再加上当前时间步的值<code>baseField</code>，就是前 20 步的 Field 值的和。用这个值除以20，得到新时刻的时均值<code>meanField</code>。由此可见，在这种情况下，<strong>每个时间步输出的时均值是从开始时刻到当前时间步的Field值对总时间的平均</strong>。</p>
</li>
<li><p>很多时候，我们并不想得到从开始到结束整个模拟时段内的平均值，而希望得到指定时段内的平均值，这时，可以通过指定<code>window</code>变量的值来达到目的。代码208行，注意到这里出现了一个新函数<code>window</code>。可以查到<code>window</code>函数返回值默认是<code>-1</code>。但可以在controlDict中<code>base</code>下面定义变量<code>windows</code>的值，当<code>window</code>函数返回值大于0时，208-217将被执行。接着上一点的假设，dt = 1, 定义并初始化为<code>window</code>函数的返回值，假设为20。则： </p>
<ul>
<li>当 <code>Dt</code> 小于或等于20时，不满足<code>Dt - dt &gt;= w</code>，此时时均值将按照上一点叙述的进行计算。</li>
<li>当 <code>Dt</code>大于20以后，假设<code>Dt = 21</code>，此时 <code>alpha = (w-dt)/w = (20-1)/20</code>，<code>bata = dt/w = 1/19</code>。令<code>meanField_pre</code>为<code>Dt = 20</code> 时的时均值，则<code>Dt = 21</code>时的时均值<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meanField = 19/20 <span class="keyword">*</span> meanField_pre + 1/20 <span class="keyword">*</span> baseField = (19 <span class="keyword">*</span> meanField_pre + baseField)/20</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>对比发现，如果<code>window = -1</code>(默认值)，则<code>Dt = 21</code>的时均值应该是<code>20/21 * meanField_pre + 1/21 * baseField</code>。而定义了<code>windows = 20</code>以后，此处的<code>19 * meanField_pre</code> 可以理解为<code>Dt = 21</code>这一步之前的19步的Field值的和，加上<code>baseField</code>，则为<code>Dt = 21</code> 以及其之前19步，共20步的Field值的和。再除以20，则为 <code>Dt = 21</code>以及其之前19步这20步的时均值。<strong>所以，当设定<code>window</code>为一正整数<code>w</code>时，输出的时均值是当前时间步以及其之前<code>w-1</code>步，这<code>w</code>步内Field的时均值</strong>。</p>
</li>
</ol>
<p>附上一个更一般化的示例：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fieldAverage1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">type</span> fieldAverage;</span><br><span class="line">    functionObjectLibs (<span class="string">"libfieldFunctionObjects.so"</span>);</span><br><span class="line">    resetOnRestart true;</span><br><span class="line">    resetOnOutput false;</span><br><span class="line">    outputControl   outputTime;</span><br><span class="line">    fields</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">U</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">mean</span>            <span class="keyword">on</span>;</span><br><span class="line">            prime2Mean      <span class="keyword">on</span>;</span><br><span class="line">            base            time; <span class="comment">//以物理时间为基础来计算平均，而不是时间步数。</span></span><br><span class="line">            <span class="keyword">window</span>          10.0;</span><br><span class="line">            windowName      w1; <span class="comment">//optional</span></span><br><span class="line">        &#125;</span><br><span class="line">        p</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">mean</span>            <span class="keyword">on</span>;</span><br><span class="line">            prime2Mean      <span class="keyword">on</span>;</span><br><span class="line">            base            time;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>resetOnRestart</code>的值决定当solver继续运行时，是否要读取最近一个时间步的<code>meanField</code>的值来计算接下来时刻的时均值；<code>resetOnOutput</code>，顾名思义，是否要在每一次输出到文件以后重置<code>meanField</code>的值。这两个开关的默认值都是<code>false</code>。<br><code>mean</code>这个开关的含义无需多言，计算公式如下：<br>$$ \overline {x} = \frac{1}{N} \sum \limits _{i=0}^{N} x_i $$<br><code>prime2Mean</code>的计算公式如下：<br>$$ \overline{x’}^{\, 2} = \frac{1}{N}\displaystyle\sum\limits_{i=0}^N (x_i - \overline{x})^2 $$<br>所以，如果<code>prime2Mean</code>为<code>on</code>，<code>mean</code>必须为<code>on</code>。</p>
<p>此外，如果计算已经结束，controlDict 中定义的 function 仍可以用<code>execFlowFunctionObjects</code>来执行。只是，这样的运行只能利用输出到文件的数据来进行计算了。举例说，假如时间步长是 0.001s， 每 0.1s 输出一次，那么同样是1-2s的时均值，solver运行过程中求解的公式是:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( field.<span class="function"><span class="title">at</span><span class="params">(<span class="number">1.001</span>)</span></span> +field.<span class="function"><span class="title">at</span><span class="params">(<span class="number">1.002</span>)</span></span> + ... + field.<span class="function"><span class="title">at</span><span class="params">(<span class="number">2.0</span>)</span></span> )/<span class="number">1000</span></span><br></pre></td></tr></table></figure></p>
<p>而solver运行完以后利用<code>execFlowFunctionObjects</code>计算的时均值应该是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( field.<span class="function"><span class="title">at</span><span class="params">(<span class="number">1.1</span>)</span></span> + field.<span class="function"><span class="title">at</span><span class="params">(<span class="number">1.2</span>)</span></span> + ... + field.<span class="function"><span class="title">at</span><span class="params">(<span class="number">2</span>)</span></span> )/<span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>注意，这个结果没有经过直接的验证，是我根据原理推演的结果。<br>有时候，运行<code>execFlowFunctionObjects</code>会报错说找不到<code>phi</code>，这时加上<code>-noFlow</code>选项，就不会报错了。</p>
<h5 id="小结">小结</h5><ol>
<li><code>base</code>用来指定作时间平均的基础，是基于时间步数(ITER)还是物理时间(time);</li>
<li><code>window</code>用来作平均的时间段的长度，如果不设定，则求的是从开始到当前时间这个时间段的平均值。<code>window</code>的数值的实际含义依<code>base</code>而定，如果<code>base</code>是<code>ITER</code>，则<code>window=20</code>表示当前步及其前 19 个时间步从 20 个时间步内的平均，而如果<code>base</code>是<code>time</code>,则表示的是 20s 内的平均。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>fieldAverage</code>是 OpenFOAM 中的一种 functionObject，用来计算时均值。其基本用法是作为一个 function object 放在 controlDict 文件中，运行 solver 的同时计算指定场的时均值，以下是一个示例：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">functions</span><br><span class="line">&#123;</span><br><span class="line">    fieldAverage1</span><br><span class="line">    &#123;</span><br><span class="line">        type            fieldAverage;</span><br><span class="line">        functionObjectLibs ( <span class="string">"libfieldFunctionObjects.so"</span> );</span><br><span class="line">        outputControl   outputTime;</span><br><span class="line">        fields</span><br><span class="line">        (</span><br><span class="line">            Ua</span><br><span class="line">            &#123;</span><br><span class="line">                 mean        <span class="function_start"><span class="keyword">on</span></span>;</span><br><span class="line">                 prime2Mean  off;</span><br><span class="line">                 base        <span class="property">time</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Ub</span><br><span class="line">            &#123;</span><br><span class="line">                 mean        <span class="function_start"><span class="keyword">on</span></span>;</span><br><span class="line">                 prime2Mean  off;</span><br><span class="line">                 base        <span class="property">time</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="OpenFOAM" scheme="http://xiaopingqiu.github.io/tags/OpenFOAM/"/>
    
      <category term="Postprocessing" scheme="http://xiaopingqiu.github.io/tags/Postprocessing/"/>
    
      <category term="OpenFOAM" scheme="http://xiaopingqiu.github.io/categories/OpenFOAM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://xiaopingqiu.github.io/2015/04/04/hello-world/"/>
    <id>http://xiaopingqiu.github.io/2015/04/04/hello-world/</id>
    <published>2015-04-04T02:00:00.000Z</published>
    <updated>2015-04-10T14:57:00.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h4 id="Test_code">Test code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world!"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="中文支持测试">中文支持测试</h4><p>看看是否支持中文。</p>
<h4 id="数学公式">数学公式</h4><p>$$ x=\frac{-b\pm \sqrt{b^2-4ac}}{2a} $$</p>
<h4 id="本地图片测试">本地图片测试</h4><p><img src="/image/juperter_impact.jpg" alt="Jupiter"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="test" scheme="http://xiaopingqiu.github.io/tags/test/"/>
    
      <category term="test" scheme="http://xiaopingqiu.github.io/categories/test/"/>
    
  </entry>
  
</feed>